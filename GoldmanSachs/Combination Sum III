Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

 

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.

class Solution {
public:
    void help(int i, int k, int target, vector<int> &soln, vector<vector<int>> &res){
        if(target == 0 && k == 0){
            res.push_back(soln);
            return;
        }
        
        if(target < 0 || k < 0){
            return;
        }
        
        if(i == 10){
            return;
        }
        
        help(i+1, k, target, soln, res);
        soln.push_back(i);
        help(i+1, k-1, target-i, soln, res);
        soln.pop_back();
    }
    
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> res;
        vector<int> soln;
        
        help(1, k, n, soln, res);
        
        return res;
    }
};
